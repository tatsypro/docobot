from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler
import requests
from bs4 import BeautifulSoup
import openai

TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'
openai.api_key = 'YOUR_OPENAI_API_KEY'

LINK, VERIFY, EDIT = range(3)

def start(update, context):
            update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, –∏ —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ 152-–§–ó.")
            return LINK

        def handle_link(update, context):
            text = update.message.text.strip()
            if "." not in text:
                return LINK
            url = text if text.startswith("http") else "https://" + text
            update.message.reply_text(f"üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞: {url}")
            try:
                r = requests.get(url, timeout=10)
                soup = BeautifulSoup(r.text, "html.parser")
                site_text = soup.get_text(separator="\n", strip=True)
                with open("prompt.txt", "r", encoding="utf-8") as f:
                    base_prompt = f.read()
                full_prompt = base_prompt.strip() + f"\n\nüßæ –¢–µ–∫—Å—Ç —Å–∞–π—Ç–∞ ({url}):\n\n" + site_text
                response = openai.ChatCompletion.create(
                    model="gpt-4o",
                    messages=[{"role": "user", "content": full_prompt}],
                    temperature=0.2,
                    max_tokens=2000
                )
                extracted = response.choices[0]["message"]["content"]
                update.message.reply_text("üîé –í–æ—Ç –¥–∞–Ω–Ω—ã–µ, –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞:\n\n" + extracted)
                context.user_data["extracted"] = extracted
                keyboard = [["‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", "‚úè –ò–∑–º–µ–Ω–∏—Ç—å"]]
                update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
                return VERIFY
            except Exception as e:
                update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∞–π—Ç–∞:\n{e}")
                return LINK

        def handle_verification(update, context):
            text = update.message.text.lower()
            if "–≤–µ—Ä–Ω–æ" in text:
                update.message.reply_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.",
                    reply_markup=ReplyKeyboardRemove())
                extracted = context.user_data.get("extracted", "")
                prompt = (
                    f"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–Ω—è—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏. –ó–∞–ø—Ä–∞—à–∏–≤–∞–π –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å.\n\n"
                    "1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.\n"
                    "2. –ó–∞—Ç–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ:\n"
                    "- –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ—Ñ–µ—Ä—Ç—É, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –∏–ª–∏ –Ω–µ –æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ –ø–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏?\n"
                    "- –°—Ä–æ–∫ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥\n"
                    "- –ù–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
                    "- –£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞\n"
                    "- –ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
                    "- –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥\n"
                    "- –°–ø–æ—Å–æ–±—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö\n"
                    "- –¢—Ä–∞–Ω—Å–≥—Ä–∞–Ω–∏—á–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞\n"
                    "- –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è (–¥–µ—Ç–∏, —Ä–µ–∫–ª–∞–º–∞, –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ç.–ø.)\n\n"
                    "–§–æ—Ä–º—É–ª–∏—Ä—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ '–≤—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'."
                    f"\n\n–í–æ—Ç —á—Ç–æ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ:\n{extracted}"
                )
                try:
                    response = openai.ChatCompletion.create(
                        model="gpt-4o",
                        messages=[{"role": "user", "content": prompt}],
                        temperature=0.4,
                        max_tokens=1000
                    )
                    questions_raw = response.choices[0]["message"]["content"]
                    questions = [q.strip() for q in questions_raw.splitlines() if q.strip()]
                    context.user_data["questions"] = questions
                    context.user_data["answers"] = []
                    update.message.reply_text(f"‚úè –£—Ç–æ—á–Ω–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏. –í–æ–ø—Ä–æ—Å 1 –∏–∑ {len(questions)}:\n\n{questions[0]}")
                    return EDIT
                except Exception as e:
                    update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ GPT:\n{e}")
                    return VERIFY
            elif "–∏–∑–º–µ–Ω–∏—Ç—å" in text:
                update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∫–∏ –≤ —É–¥–æ–±–Ω–æ–π —Ñ–æ—Ä–º–µ:",
                    reply_markup=ReplyKeyboardRemove())
                context.user_data["awaiting_edit"] = True
                return EDIT
            return VERIFY

        def handle_edit(update, context):
            text = update.message.text.strip()
            if context.user_data.get("awaiting_edit"):
                context.user_data["manual_correction"] = text
                context.user_data["awaiting_edit"] = False
                update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–í—Å—ë –≤–µ—Ä–Ω–æ' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                    reply_markup=ReplyKeyboardMarkup([["‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", "‚úè –ò–∑–º–µ–Ω–∏—Ç—å"]],
                        one_time_keyboard=True, resize_keyboard=True))
                return VERIFY
            answers = context.user_data.get("answers", [])
            questions = context.user_data.get("questions", [])
            answers.append(text)
            context.user_data["answers"] = answers
            if len(answers) < len(questions):
                next_q = questions[len(answers)]
                update.message.reply_text(f"–í–æ–ø—Ä–æ—Å {len(answers)+1} –∏–∑ {len(questions)}:\n\n{next_q}")
                return EDIT
            extracted = context.user_data.get("extracted", "")
            user_answers = "\n".join(answers)
            manual_fix = context.user_data.get("manual_correction", "")
            final_prompt = (
                f"–¢—ã ‚Äî —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ù–∞ –æ—Å–Ω–æ–≤–µ:\n"
                f"üîπ –î–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞:\n{extracted}\n\n"
                f"‚úè –£—Ç–æ—á–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_answers}\n\n"
                f"{'üõ† –ü—Ä–∞–≤–∫–∏:\n' + manual_fix if manual_fix else ''}\n"
                "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (152-–§–ó)."
            )
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-4o",
                    messages=[{"role": "user", "content": final_prompt}],
                    temperature=0.3,
                    max_tokens=1800
                )
                result = response.choices[0]["message"]["content"]
                context.user_data["final_data"] = result
                update.message.reply_text("üìÑ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã:")
                update.message.reply_text(result)
                return ConversationHandler.END
            except Exception as e:
                update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n{e}")
                return EDIT

        def main():
            updater = Updater(TOKEN, use_context=True)
            dp = updater.dispatcher
            conv = ConversationHandler(
                entry_points=[CommandHandler("start", start)],
                states={
                    LINK: [MessageHandler(Filters.text & ~Filters.command, handle_link)],
                    VERIFY: [MessageHandler(Filters.text & ~Filters.command, handle_verification)],
                    EDIT: [MessageHandler(Filters.text & ~Filters.command, handle_edit)],
                },
                fallbacks=[]
            )
            dp.add_handler(conv)
            updater.start_polling()
            updater.idle()

        if __name__ == '__main__':
            main()