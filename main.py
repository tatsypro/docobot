import os
import sys
import re

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ ===
def install_and_import(pip_name, import_name=None):
    import importlib
    if import_name is None:
        import_name = pip_name
    try:
        importlib.import_module(import_name)
    except ImportError:
        import subprocess
        subprocess.check_call([sys.executable, "-m", "pip", "install", pip_name])
    finally:
        globals()[import_name] = importlib.import_module(import_name)

modules = [
    ("pdfplumber", "pdfplumber"),
    ("pytesseract", "pytesseract"),
    ("Pillow", "PIL"),
    ("python-docx", "docx"),
]

for pip_name, import_name in modules:
    install_and_import(pip_name, import_name)

import pdfplumber
import pytesseract
from PIL import Image
from docx import Document

# === –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–±–æ—Ç, –≤–µ–±, –ø–∞—Ä—Å–∏–Ω–≥ –∏ –ø—Ä–æ—á–µ–µ) ===
from flask import Flask, request
import threading
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler
import requests
from bs4 import BeautifulSoup
import openai
import time

# üîê –¢–æ–∫–µ–Ω—ã
 = '–≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω'
 = '–≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω'

# üåê Flask –¥–ª—è webhook
app = Flask(__name__)
payment_confirmed_users = set()

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.form or request.get_json()
    if data.get("Status") == "Completed":
        user_id = data.get("AccountId")
        print(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, —Å–ø–∞—Å–∏–±–æ! {user_id}")
        payment_confirmed_users.add(str(user_id))
    return "OK"

@app.route("/")
def index():
    return "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

# threading.Thread(target=run_flask).start()

# üì¶ Telegram –ª–æ–≥–∏–∫–∞
LINK, VERIFY, EDIT = range(3)

def start(update, context):
    def start(update, context):
        print("==> –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è start()")
        update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! ..."
        )
        # –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–ú—ã –¥–µ–ª–∞–µ–º –≤—Å—ë, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ 152-–§–ó –±—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ –∏ –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –ª—é–±—É—é –∏–∑ —ç—Ç–∏—Ö –≤–µ—â–µ–π ‚Äî –∫–∞–∫ –≤–∞–º –ø—Ä–æ—â–µ:\n\n"
        "1Ô∏è‚É£ –°—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Å–∞–π—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, tatsy.pro –∏–ª–∏ https://tatsy.pro)\n"
        "2Ô∏è‚É£ –ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
        "‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —é—Ä–ª–∏—Ü–∞ (–∏–ª–∏ –§–ò–û –¥–ª—è –ò–ü)\n"
        "‚Ä¢ –ò–ù–ù\n"
        "‚Ä¢ –û–ì–†–ù (–∏–ª–∏ –û–ì–†–ù–ò–ü)\n"
        "‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å\n\n"
        "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–∞–π–ª —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ "
        "(txt, doc, docx, pdf, jpg, png) ‚Äî –±–æ—Ç –≤—Å—ë –ø–æ–π–º—ë—Ç –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—Å—ë —Å–æ–±–µ—Ä—ë—Ç –∑–∞ –≤–∞—Å. "
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∑–∞–±—ã–ª–∏ ‚Äî –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –±–æ—Ç —Å–∞–º –ø–æ–¥—Å–∫–∞–∂–µ—Ç –∏ —É—Ç–æ—á–Ω–∏—Ç, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç. "
        "–ù–∏–∫–∞–∫–∏—Ö —Å—Ç—Ä–æ–≥–∏—Ö –ø—Ä–∞–≤–∏–ª –∏ –Ω–µ—É–¥–æ–±–Ω—ã—Ö —Ñ–æ—Ä–º ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞–±–æ—Ç–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞! ü´∂"
    )
    context.user_data['pending_fields'] = ['site', 'company', 'inn', 'ogrn', 'address']
    context.user_data['answers'] = {}
    return LINK

def extract_text_from_file(file_path):
    ext = os.path.splitext(file_path)[1].lower()
    text = ""
    try:
        if ext == ".txt":
            with open(file_path, "r", encoding="utf-8") as f:
                text = f.read()
        elif ext == ".docx":
            doc = Document(file_path)
            text = "\n".join([p.text for p in doc.paragraphs])
        elif ext == ".pdf":
            with pdfplumber.open(file_path) as pdf:
                text = "\n".join([page.extract_text() or "" for page in pdf.pages])
        elif ext in [".jpg", ".jpeg", ".png"]:
            img = Image.open(file_path)
            text = pytesseract.image_to_string(img, lang="rus+eng")
        else:
            text = ""
    except Exception as e:
        text = f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}]"
    return text

def handle_link(update, context):
    text = update.message.text.strip()
    lines = text.splitlines()
    site_url = None

    # –ù–∞–π—Ç–∏ url —Å–∞–π—Ç–∞
    for line in lines:
        candidate = line.strip()
        if re.match(r'(https?://)?[a-zA-Z0-9\-\_]+\.[a-zA-Z]{2,}', candidate):
            if not candidate.startswith("http"):
                candidate = "https://" + candidate
            site_url = candidate
            break

    # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —ç—Ç–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    requisites = []
    for l in lines:
        clean_l = l.strip()
        if clean_l and site_url and clean_l != site_url.replace("https://", "") and clean_l != site_url:
            requisites.append(clean_l)
    requisites_text = "\n".join(requisites)
    context.user_data["site_url"] = site_url
    context.user_data["requisites"] = requisites_text

    site_text = ""
    if site_url:
        try:
            r = requests.get(site_url, timeout=10)
            if r.ok:
                soup = BeautifulSoup(r.text, "html.parser")
                site_text = soup.get_text(separator="\n", strip=True)
        except Exception as e:
            site_text = f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∞–π—Ç–∞: {e}]"

    # --- –ò—Å–ø–æ–ª—å–∑—É–µ–º prompt.txt –¥–ª—è —Å–∞–π—Ç–∞, prompt0.txt –¥–ª—è –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ ---
    if site_url:
        with open("prompt.txt", "r", encoding="utf-8") as f:
            base_prompt = f.read()
        full_prompt = (
            base_prompt.strip() +
            f"\n\nüßæ –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{requisites_text}\n" +
            f"\nüßæ –¢–µ–∫—Å—Ç —Å–∞–π—Ç–∞ ({site_url}):\n\n{site_text}"
        )
    else:
        with open("prompt0.txt", "r", encoding="utf-8") as f:
            prompt0 = f.read()
        full_prompt = (
            prompt0.strip() +
            "\n\n---\n"
            "–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n" +
            "\n".join(lines)
        )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": full_prompt}],
            temperature=0.2,
            max_tokens=2000
        )
        extracted = response.choices[0]["message"]["content"]
        update.message.reply_text("üîé –í–æ—Ç –¥–∞–Ω–Ω—ã–µ, –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n" + extracted)
        context.user_data["extracted"] = extracted
        keyboard = [["‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", "‚úè –ò–∑–º–µ–Ω–∏—Ç—å"]]
        update.message.reply_text(
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return VERIFY

    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n{e}")
        return LINK

def handle_verification_buttons(update, context):
    text = update.message.text.lower()
    extracted = context.user_data.get("extracted", "")
    if "–≤–µ—Ä–Ω–æ" in text:
        update.message.reply_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã.\n"
            "–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–µ–º —Å–∞–π—Ç–µ –∏ —É—Å–ª—É–≥–∞—Ö.",
            reply_markup=ReplyKeyboardRemove())

        context.user_data["basic_fields_confirmed"] = True
        context.user_data["confirmed_fields"] = extracted

        # –ß–∏—Ç–∞–µ–º prompt3.txt ‚Äî –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤—Å–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã!
        with open("prompt3.txt", "r", encoding="utf-8") as f:
            prompt3 = f.read()

        # system_message —Ç–æ–ª—å–∫–æ –∏–∑ prompt3.txt (–±–µ–∑ prompt2.txt)
        system_message = {
            "role": "system",
            "content": (
                "–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã:\n" +
                extracted +
                "\n\n–ù–µ —Å–ø—Ä–∞—à–∏–≤–∞–π –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ. –ü–µ—Ä–µ–π–¥–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∏–∂–µ –ø–æ –æ–¥–Ω–æ–º—É:\n\n" +
                prompt3
            )
        }
        context.user_data["chat_history"] = [system_message]

        try:
            response = openai.ChatCompletion.create(
                model="gpt-4o",
                messages=context.user_data["chat_history"],
                temperature=0.3,
                max_tokens=1000
            )
            print("[DEBUG] GPT –æ—Ç–≤–µ—Ç:", response)
            gpt_reply = response.choices[0]["message"]["content"]
            print("[DEBUG] GPT content:", gpt_reply)
            context.user_data["chat_history"].append({
                "role": "assistant",
                "content": gpt_reply
            })
            update.message.reply_text(gpt_reply)
            return EDIT

        except Exception as e:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ GPT:\n{e}")
            return VERIFY

    elif "–∏–∑–º–µ–Ω–∏—Ç—å" in text:
        context.user_data["awaiting_edit"] = True
        update.message.reply_text(
            "‚úçÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —á–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ.",
            reply_markup=ReplyKeyboardRemove())
        return EDIT

def handle_edit(update, context):
    user_input = update.message.text.strip()
    user_id = str(update.effective_user.id)
    history = context.user_data.get("chat_history", [])
    history.append({"role": "user", "content": user_input})
    with open("prompt2.txt", "r", encoding="utf-8") as file:
        prompt2 = file.read()
    extracted = context.user_data.get("extracted", "")
    system_message = {
        "role": "system",
        "content": f"{prompt2}\n\n–í–æ—Ç —á—Ç–æ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ:\n{extracted}"
    }
    try:
        print("\n=== GPT PROMPT (handle_edit, —Å–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö) ===")
        print("system_message:", system_message)
        print("history:", history)
        print("=== –ö–û–ù–ï–¶ PROMPT ===\n")
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[system_message] + history,
            temperature=0.3,
            max_tokens=1200
        )
        gpt_reply = response.choices[0]["message"]["content"]

        # –ó–∞–º–µ–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä [END] –Ω–∞ –∫—Ä–∞—Å–∏–≤—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if "[END]" in gpt_reply:
            gpt_reply = gpt_reply.replace(
                "[END]",
                "–°–ø–∞—Å–∏–±–æ, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
            )

        # --- –Ω–∏–∂–µ –ø–æ –æ–±—ã—á–Ω–æ–π –ª–æ–≥–∏–∫–µ
        if "variables" not in context.user_data:
            context.user_data["variables"] = {}

        lines = gpt_reply.split('\n')
        for line in lines:
            match = re.match(r"\[(.+?)\]:\s*(.+)", line)
            if not match:
                match = re.match(r"-?\s*\[(.+?)\]\s*[‚Äî-]\s*(.+)", line)
            if match:
                key, value = match.groups()
                context.user_data["variables"][key.strip()] = value.strip()

        history.append({"role": "assistant", "content": gpt_reply})
        context.user_data["chat_history"] = history

        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É, –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–º–∞—Ä–∫–µ—Ä –≤–Ω—É—Ç—Ä–∏ gpt_reply —É–∂–µ –∑–∞–º–µ–Ω—ë–Ω)
        if "–°–ø–∞—Å–∏–±–æ, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!" in gpt_reply:
            if user_id in payment_confirmed_users:
                update.message.reply_text(
                    "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
                generate_all_documents(update, context)
                return ConversationHandler.END
            else:
                send_payment_button(update, context)
                return EDIT

        update.message.reply_text(gpt_reply)
        return EDIT
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ GPT:\n{e}")
        return EDIT

def send_payment_button(update, context):
    update.message.reply_text(
        "–£—Ä–∞ ü•≥! –°–µ–π—á–∞—Å —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∏ –æ–Ω–∏ —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n–ê –ø–æ–∫–∞ —è —Ä–∞–±–æ—Ç–∞—é, —É –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É ü´∂"
    )
    keyboard = [[
        InlineKeyboardButton(
            "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 4 990 ‚ÇΩ",
            url="https://c.cloudpayments.ru/payments/4abeede5cf154f208314d564f06237d7"
        )
    ]]
    markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
                              reply_markup=markup)

def generate_all_documents(update, context):
    import time
    from docx import Document
    import os

    print("[DEBUG] –ó–∞–ø—É—Å–∫ generate_all_documents")
    variables = context.user_data.get("variables", {})
    if variables:
        variables_text = "\n".join([
            f"[{key}]: {value if value else '[–ù–ï –£–ö–ê–ó–ê–ù–û]'}"
            for key, value in variables.items()
        ])
    else:
        variables_text = context.user_data.get("extracted", "")
        if not variables_text:
            variables_text = ""

    site_url = context.user_data.get("site_url", "[–≤–∞—à_—Å–∞–π—Ç]")
    print(f"[DEBUG] site_url: {site_url}")
    print(f"[DEBUG] –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞:\n{variables_text}")

    documents = [
        {
            "name": "–ü–æ–ª–∏—Ç–∏–∫–∞_–æ–±—Ä–∞–±–æ—Ç–∫–∏_–ü–î.docx",
            "reference_file": "Reference_privacy-policy.txt",
            "title": "üßæ –ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        },
        {
            "name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ_—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.docx",
            "reference_file": "Reference_terms-of-use.txt",
            "title": "üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"
        },
        {
            "name": "–°–æ–≥–ª–∞—Å–∏–µ_–Ω–∞_–æ–±—Ä–∞–±–æ—Ç–∫—É_–ü–î.docx",
            "reference_file": "Reference_—Åonsent.txt",
            "title": "‚úçÔ∏è –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        },
        {
            "name": "–ü—É–±–ª–∏—á–Ω–∞—è_–æ—Ñ–µ—Ä—Ç–∞.docx",
            "reference_file": "Reference_offer.txt",
            "title": "üíº –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞"
        }
    ]

    with open("Prompt_Docobot_API.txt", "r", encoding="utf-8") as f:
        instruction = f.read()
    print("[DEBUG] –ü—Ä–æ—á–∏—Ç–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –∏–∑ Prompt_Docobot_API.txt")

    for doc in documents:
        try:
            print(f"[DEBUG] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {doc['name']}")
            with open(doc["reference_file"], "r", encoding="utf-8") as f:
                reference = f.read()
            print(
                f"[DEBUG] –ü—Ä–æ—á–∏—Ç–∞–Ω —Ä–µ—Ñ–µ—Ä–µ–Ω—Å {doc['reference_file']}, –¥–ª–∏–Ω–∞: {len(reference)} —Å–∏–º–≤–æ–ª–æ–≤"
            )
            prompt = (
                f"{instruction}\n\n"
                f"‚¨áÔ∏è –í–æ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:\n"
                f"{variables_text}\n\n"
                f"üìé –í–æ—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n"
                f"{reference}\n\n"
                f"{doc['title']}\n"
                "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
            )
            print(
                f"[DEBUG] –ü—Ä–æ–º–ø—Ç –¥–ª—è GPT (–æ–±—Ä–µ–∑–∞–Ω –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):\n{prompt[:1000]}..."
            )
            response = openai.ChatCompletion.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.2,
                max_tokens=3000)
            text = response.choices[0]["message"]["content"]
            print(f"[DEBUG] –û—Ç–≤–µ—Ç GPT, –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:\n{text[:500]}...")
            document = Document()
            for para in text.strip().split("\n\n"):
                document.add_paragraph(para.strip())
            document.save(doc["name"])
            print(f"[DEBUG] –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {doc['name']}")
            with open(doc["name"], "rb") as f:
                update.message.reply_document(f)
            os.remove(doc["name"])
            print(f"[DEBUG] –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏: {doc['name']}")
            time.sleep(1)
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {doc['name']}: {e}")
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {doc['name']}:\n{e}")

    update.message.reply_text(
        "üìé –î–æ–∫—É–º–µ–Ω—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
        "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx\n\n"
        "üìå –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:\n"
        "1. –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ. –û–±—ã—á–Ω–æ —Å—Å—ã–ª–∫–∏ –≤—ã–≥–ª—è–¥—è—Ç —Ç–∞–∫:\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ: {site_url}/terms-of-use/\n"
        f"‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫–∞ –ü–î: {site_url}/privacy-policy/\n"
        f"‚Ä¢ –û—Ñ–µ—Ä—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å): {site_url}/offer/\n"
        f"‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î: {site_url}/personal-data-consent/\n\n"
        "2. –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –≤ –ø–æ–¥–≤–∞–ª —Å–∞–π—Ç–∞.\n"
        "3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä:\n"
        "https://pd.rkn.gov.ru/operators-registry/notification/form/\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @gestibot_support"
    )

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LINK:
            [MessageHandler(Filters.text & ~Filters.command, handle_link)],
            VERIFY: [
                MessageHandler(Filters.text & ~Filters.command,
                               handle_verification_buttons)
            ],
            EDIT:
            [MessageHandler(Filters.text & ~Filters.command, handle_edit)],
        },
        fallbacks=[])
    dp.add_handler(conv)
    updater.start_polling()
    updater.idle()